#!/bin/bash
#set -euo pipefail
#"=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~="
# Author: Arafat Ali | Email: webmaster@sofibox.com
ADMIN_NAME="Arafat Ali"
ADMIN_EMAIL="webmaster@sofibox.com"
APP_SPECIFIC_NAME="MaxiDNS"
APP_DESCRIPTION="${APP_SPECIFIC_NAME} is a script used for executing DNS API from various providers \
such as linode, digital ocean, Microsoft Azure and etc"
APP_STATUS="alpha"
APP_VERSION="1.0.2-${APP_STATUS}"
#"=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~="

usage() {
  echo "Usage later"
}
_exit() {
  :
}

function linode() {
  local provider action
  provider="$1"
  shift
  action="$1"
  linode_max_page=2
  #maxidns --linode "get-domain-id" "maxibi.com"
  if [[ "${action}" == "get-domain-id" ]]; then
    shift
    local domain_id domain
    domain="$1"
    dis_args="${*:2}"
    if [[ -n "${dis_args}" ]]; then
      echo "Warning, extra arguments discarded: ${dis_args}"
    fi
    if [ $# -ge 1 ]; then
      domain_id=$(${LINODE_CLI_BIN} domains list --json --pretty | ${JQ_BIN} ".[] | select(.domain == \"${domain}\") | .id")
      # Traditional way without jq:
      #domain_id=$(${LINODE_CLI_BIN} domains list --domain "${domain}" --pretty --json | grep -F '"id":' | sed -r 's/[^0-9]//g')
      if [ -n "${domain_id}" ]; then
        # Here is the real result for domain ID:
        echo "${domain_id}"
        return 0
      else
        echo "Error, no ID found for domain ${domain}"
        exit 1
      fi
    else
      echo "Error, usage: ${SCRIPT_NAME} ${provider} ${action} <domain_name>"
      exit 2
    fi

  #maxidns --linode "add-dns-record" "maxibi.com" "TXT" "x._domainkey" "*i..2uiu1KJM@#9IU@J()!@IJI92" "5"
  elif [[ "${action}" == "add-dns-record" ]]; then
    shift
    #echo "add-dns-record"
    local domain name ttl type value domain_id dis_args add_dns_record retval
    domain="$1"
    type="$2"
    name="$3"
    value="$4"
    # Linode ttl_sec is not replaced in API but it's working (bug?)
    ttl="$5"
    dis_args="${*:6}"

    if [[ -n "${dis_args}" ]]; then
      echo "Warning, extra arguments discarded: ${dis_args}"
    fi
    if [ $# -ge 5 ]; then
      echo "Checking domain ID for domain ${domain} ..."
      # domain_id=$(${LINODE_CLI_BIN} domains list --domain "${domain}" --pretty --json | grep -F '"id":' | sed -r 's/[^0-9]//g')
      domain_id=$(${LINODE_CLI_BIN} domains list --json --pretty | ${JQ_BIN} ".[] | select(.domain == \"${domain}\") | .id")
      if [ -n "${domain_id}" ]; then
        # Here is the real result for domain ID:
        # echo "${domain_id}"
        echo "Adding new record name ..."

        add_dns_record=$(
          ${LINODE_CLI_BIN} domains records-create "${domain_id}" --pretty --json \
          --type "${type}" --name "${name}" --target "${value}" --ttl_sec "${ttl}"
        )
        retval=$?
        if [ ${retval} = 0 ]; then
          echo "Success, record has been successfully added into linode DNS management"
          return ${retval}
        else
          echo "Error [${retval}], something is wrong when adding DNS record into linode DNS management"
          exit ${retval}
        fi

        echo "${add_dns_record}"
        return 0
      else
        echo "Error, no ID found for domain ${domain}"
        exit 1
      fi
      return 0
    else
      echo "Error, usage: ${SCRIPT_NAME} ${provider} ${action} <domain_name> <record_type> <record_name> <record_value> <record_ttl>"
      exit 2
    fi
    # maxidns --linode "delete-dns-record" <domain_name> <record_name> <record_type>
  elif [[ "${action}" == "delete-dns-record" ]]; then
    shift
    #echo "add-dns-record"
    local domain name dis_args record_id record_ids record_ids_count
    domain="$1"
    # Record name
    name="$2"
    type="$3"
    dis_args="${*:4}"

    if [[ -n "${dis_args}" ]]; then
      echo "Warning, extra arguments discarded: ${dis_args}"
    fi

    if [ $# -ge 3 ]; then
      echo "Checking record for domain ${domain} with record name ${name} and type ${type} ..."
      #domain_id=$(${LINODE_CLI_BIN} --pretty --json domains list --domain "${domain}" | grep -F '"id":' | sed -r 's/[^0-9]//g')
      domain_id=$(${LINODE_CLI_BIN} --json --pretty domains list | ${JQ_BIN} ".[] | select(.domain == \"${domain}\") | .id")
      if [ -n "${domain_id}" ]; then
        #${LINODE_CLI_BIN} --pretty --json domains records-list --page 2 "${domain_id}"
        # Domain ID is correct now we execute next statement:
        # The record list is huge, use loop to scan based on maximum $linode_max_page
        #count=2
        #record_ids=$(${LINODE_CLI_BIN} --pretty --json domains records-list --page ${count} "${domain_id}" | ${JQ_BIN} ".[] | select((.name == \"${name}\") and (.type==\"${type}\")) | .id")
        #record_ids=$(${LINODE_CLI_BIN} --pretty --json domains records-list --page ${count} "${domain_id}" | ${JQ_BIN} ".[] | select((.name == \"${name}\") and (.type==\"${type}\")) | .id | first")
        #echo "${record_ids}"
        count=1
        while [[ ${count} -le ${linode_max_page} ]]; do
          record_ids=$(${LINODE_CLI_BIN} --pretty --json domains records-list --page ${count} "${domain_id}" | ${JQ_BIN} ".[] | select((.name == \"${name}\") and (.type==\"${type}\")) | .id")
          #  # Without using jq (traditional way):
          #  #| grep \"name\"": \"${name}\"" -B 1 \
          #  #| sed -r 's/[^0-9]//g' #\
          #  #| head -n 1
          # Break if found result for that page
          if [[ -n ${record_ids} ]]; then
            break
          fi
          ((count++))
        done
        # Without -n condition, the record will be counted as 1 even it's empty line
        if [[ -n "${record_ids}" ]]; then
          record_ids_count=$(echo "${record_ids}" | wc -l)
          #echo "${record_ids}"
          echo "Total record ID found for the record name ${name} is ${record_ids_count}"
          #c2=1
          #exit 1
          #record_ids_count=$(echo "${record_ids}" | wc -l)
          echo "Deleting ${record_ids_count} record(s):"
          success=0
          for record_id in ${record_ids}; do
            #Debug:
            echo "Deleting record ID ${record_id} ..."
            ${LINODE_CLI_BIN} --json --pretty domains records-delete "${domain_id}" "${record_id}"
            retval=$?
            if [ "${retval}" = 0 ]; then
              echo "OK, record ID ${record_id} has been deleted successfully."
              # Do next deletion
              ((success++))
            else
              echo "Error [${retval}], delete failed for record ID ${record_id}"
              # Do next deletion
            fi
          done
          echo ""
          if [ "${success}" == "${record_ids_count}" ]; then
            echo "OK, ${success} out of ${record_ids_count} record(s) has been successfully deleted"

          elif [[ "${success}" -eq 1 && "${success}" -lt "${record_ids_count}" ]]; then
            echo "Warning, only ${success} out of ${record_ids_count} record(s) has been successfully deleted"
          else
            echo "Warning, no record has been deleted"
          fi
        else
          # Useful variable for future reference
          record_ids_count=0
          echo "Error, no record ID with record name ${name} and type ${type} is found for domain ${domain}"
          exit 1
        fi

        return 0
      else
        echo "Error, no domain ID found for domain ${domain}"
        exit 1
      fi
      return 0
    else
      echo "Error, usage: ${SCRIPT_NAME} ${provider} ${action} <domain_name> <record_name> <record_type>"
      exit 2
    fi

  # In linode for record, only 3 things can be updated: name, value and TTL.
  # maxidns --linode "update-dns-record" <domain_name> <record_type> <record_name> <record_value> <record_ttl>
  elif [[ "${action}" == "update-dns-record" ]]; then
    shift
    #echo "add-dns-record"
    local domain type name value dis_args record_id record_ids record_ids_count
    domain="$1"
    # Record name
    type="$2"
    name="$3"
    value="$4"
    ttl="$5"
    dis_args="${*:6}"

    if [[ -n "${dis_args}" ]]; then
      echo "Warning, extra arguments discarded: ${dis_args}"
    fi

    if [ $# -ge 5 ]; then
      echo "Checking record for domain ${domain} with record name ${name} and type ${type} ..."
      #domain_id=$(${LINODE_CLI_BIN} --pretty --json domains list --domain "${domain}" | grep -F '"id":' | sed -r 's/[^0-9]//g')
      domain_id=$(${LINODE_CLI_BIN} --json --pretty domains list | ${JQ_BIN} ".[] | select(.domain == \"${domain}\") | .id")
      if [ -n "${domain_id}" ]; then
        count=1
        while [[ ${count} -le ${linode_max_page} ]]; do
          record_ids=$(${LINODE_CLI_BIN} --pretty --json domains records-list --page ${count} "${domain_id}" | ${JQ_BIN} ".[] | select((.name == \"${name}\") and (.type==\"${type}\")) | .id")
          # Break if found result for that page
          if [[ -n ${record_ids} ]]; then
            break
          fi
          ((count++))
        done
        # Without -n condition, the record will be counted as 1 even it's empty line
        if [[ -n "${record_ids}" ]]; then
          record_ids_count=$(echo "${record_ids}" | wc -l)
          #echo "${record_ids}"
          echo "Total record ID found for the record name ${name} is ${record_ids_count}"
          echo "Updating ${record_ids_count} record(s):"
          success=0
          for record_id in ${record_ids}; do
            #Debug:
            echo "Updating record ID ${record_id} ..."
            ${LINODE_CLI_BIN} --json --pretty domains records-update "${domain_id}" "${record_id}" --name "${name}" --target "${value}" --ttl_sec "${ttl}"
            retval=$?
            if [ "${retval}" = 0 ]; then
              echo "OK, record ID ${record_id} has been updated successfully updated."
              # Do next update
              ((success++))
            else
              echo "Error [${retval}], update failed for record ID ${record_id}"
              # Do next update
            fi
          done
          echo ""
          if [ "${success}" == "${record_ids_count}" ]; then
            echo "OK, ${success} out of ${record_ids_count} record(s) has been successfully updated"

          elif [[ "${success}" -eq 1 && "${success}" -lt "${record_ids_count}" ]]; then
            echo "Warning, only ${success} out of ${record_ids_count} record(s) has been successfully updated"
          else
            echo "Warning, no record has been updated"
          fi
        else
          # Useful variable for future reference
          record_ids_count=0
          echo "Error, no record ID with record name ${name} and type ${type} is found for domain ${domain}"
          exit 1
        fi
        return 0
      else
        echo "Error, no domain ID found for domain ${domain}"
        exit 1
      fi
      return 0
    else
      echo "Error, usage: ${SCRIPT_NAME} ${provider} ${action} <domain_name> <record_type> <record_name> <record_value> <record_ttl>"
      exit 2
    fi

  else
    if [ -z "${action}" ]; then
      echo "Error, the given action argument is empty: "
      echo "Usage: ${SCRIPT_NAME} ${provider} ${action} <domain_name> <record_name>"
    else
      echo "Error, the given action argument '${action}' does not exist"
    fi
    exit 1
  fi

}

function digitalocean() {
  shift
  local action
  action="$1"
  if [[ "${action}" == "add-dns-record" ]]; then
    shift
    echo "digitalocean"
    return 0
  fi
}
SCRIPT_PATH="$(dirname "$(readlink -f "$0")")"
SCRIPT_NAME=$(basename -- "$0")
BOX_HOSTNAME=$(hostname)
DATE_BIN=$(command -v date)
MAIL_BIN=$(command -v mail)

LOG_PATH="${SCRIPT_PATH}/log"
CONFIG_PATH="${SCRIPT_PATH}/conf"
CODE_PATH="${SCRIPT_PATH}/code"
mkdir -p "${LOG_PATH}"
mkdir -p "${CONFIG_PATH}"
mkdir -p "${CODE_PATH}"
# Generate random string based on date
RANDSTR="$(${DATE_BIN} '+%d-%m-%Y_%H-%M-%S').${RANDOM}"
DATE_TIME_NOW="$(date '+%d-%m-%Y_%H-%M-%S')" #31-03-2020--11-56-16
REPORT_FILE="${LOG_PATH}/${SCRIPT_NAME}-${RANDSTR}-${DATE_TIME_NOW}-report.log"
touch "${REPORT_FILE}"

ENVIRONMENT_FILE="${SCRIPT_PATH}/maxidns.env"
if [ -f "${ENVIRONMENT_FILE}" ]; then
  source "${ENVIRONMENT_FILE}"
fi

LINODE_CLI_BIN=$(which linode-cli)
if [ -z "${LINODE_CLI_BIN}" ]; then
  echo "[${SCRIPT_NAME}]: 'error': This utility requires linode-cli to be installed."
  echo "[${SCRIPT_NAME}]: Installing linode-cli ..." 2>&1 | tee -a "${REPORT_FILE}"

  if command -v pip3 &>/dev/null; then
    pip3 install linode-cli --upgrade
  else
    apt-get -y install python3-pip
    pip3 install linode-cli --upgrade
  fi

  linode_dns_api_key=$(sed -n 's/^LINODE_DNS_API_KEY=//p' "${ENVIRONMENT_FILE}" | sed -e 's/^"//' -e 's/"$//')
  #digitalocean_dns_api_key=$(sed -n 's/^DIGITALOCEAN_DNS_API_KEY=//p' "${ENVIRONMENT_FILE}" | sed -e 's/^"//' -e 's/"$//')

  echo "[${SCRIPT_NAME}]: Configuring linode-cli using expect ..." 2>&1 | tee -a "${REPORT_FILE}"

  apt-get -y install expect
  LINODE_CLI=$(expect -c "
              set timeout 3
              spawn linode-cli
              expect \"Personal Access Token:\"
              send \"${linode_dns_api_key}\r\"
              expect \"Default Region (Optional):\"
              send \"\r\"
              expect \"Default Type of Linode (Optional):\"
              send \"\r\"
              expect \"Default Image (Optional):\"
              send \"\r\"
              expect eof
              ")
  echo "Result: "
  echo "${LINODE_CLI}"
fi

#DIGITALOCEAN_CLI_BIN=
#AZURE_BIN=

JQ_BIN=$(which jq)
if [ -z "${JQ_BIN}" ]; then
  echo "[${SCRIPT_NAME}]: 'error': This utility requires jq to be installed."
  apt-get -y install jq
fi

ARGNUM="$#"
# Handle option arguments
if [ $ARGNUM -eq 0 ]; then
  echo "[${SCRIPT_NAME}]: Error, no argument is supplied. Use [ ${SCRIPT_NAME} --help ] to see the valid options"
  exit 1
fi

while [ "$#" -gt 0 ]; do
  case "$1" in
  -h | --help)
    usage
    exit 0
    ;;
  # Display Program version
  -v | --version)
    echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~="
    echo "=${APP_SPECIFIC_NAME}-${APP_VERSION}="
    echo "=by Arafat Ali | arafat@sofibox.com ="
    echo "=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~=~="
    break
    ;;
  -linode | --linode)
    linode "$@"
    exit 0
    break
    ;;
  -digitalocean | --digitalocean)
    digitalocean "$@"
    exit 0
    break
    ;;
  --)
    break
    ;;
  -*)
    opt="$1"
    echo "Invalid option '${opt}'. Use --help to see the valid options"
    exit 1
    ;;
  *) ;;
  esac
  shift
done
